export declare const advancement: import("./commands/implementations").AdvancementCommand, attribute: (target: import("./arguments").SingleEntityArgument, attribute: string) => import("./commands/implementations").AttributeOperation, bossbar: import("./commands/implementations").Bossbar, clear: (targets?: import("./arguments").MultiplePlayersArgument | undefined, item?: import("./generalTypes").LiteralUnion<import("./arguments").ITEMS> | import("./resources").TagInstance<"items"> | undefined, maxCount?: number | undefined) => void, clone: (begin: import("./arguments").Coordinates, end: import("./arguments").Coordinates, destination: import("./arguments").Coordinates) => import("./commands/implementations").CloneOptions, comment: (...comments: unknown[]) => void, data: import("./commands/implementations").DataCommand, datapack: import("./commands/implementations").DatapackCommand, debug: import("./commands/implementations").Debug, defaultgamemode: (mode: import("./arguments").GAMEMODES) => void, difficulty: (difficulty?: import("./arguments").DIFFICULTIES | undefined) => void, effect: import("./commands/implementations").Effect, enchant: (targets: import("./arguments").MultipleEntitiesArgument, enchantment: import("./generalTypes").LiteralUnion<import("./arguments").ENCHANTMENTS>, level?: number | undefined) => void, execute: Omit<import("./commands/implementations").ExecuteWithRun<import("./commands").CommandsRoot>, "run" | "runOne">, experience: import("./commands/implementations").Experience, fill: (from: import("./arguments").Coordinates, to: import("./arguments").Coordinates, block: import("./generalTypes").LiteralUnion<import("./arguments").BLOCKS>) => import("./commands/implementations").FillArguments, functionCmd: (functionName: string | import("./resources").TagInstance<"functions">) => void, forceload: import("./commands/implementations").Forceload, gamemode: (gamemode: import("./arguments").GAMEMODES, targets?: import("./arguments").MultiplePlayersArgument | undefined) => void, gamerule: (gamerule: import("./generalTypes").LiteralUnion<import("./arguments").GAMERULES>, value?: number | boolean | undefined) => void, give: (targets: import("./arguments").MultiplePlayersArgument, item: import("./generalTypes").LiteralUnion<import("./arguments").ITEMS>, count?: number | undefined) => void, help: (command_?: import("./generalTypes").LiteralUnion<"list" | "advancement" | "recipe" | "schedule" | "item" | "tag" | "weather" | "team" | "gamemode" | "execute" | "attribute" | "bossbar" | "clone" | "data" | "datapack" | "debug" | "defaultgamemode" | "difficulty" | "effect" | "give" | "clear" | "enchant" | "scoreboard" | "comment" | "experience" | "fill" | "functionCmd" | "forceload" | "gamerule" | "help" | "kill" | "locate" | "locatebiome" | "loot" | "me" | "msg" | "particle" | "playsound" | "raw" | "reload" | "say" | "seed" | "setblock" | "setidletimeout" | "setworldspawn" | "spawnpoint" | "spectate" | "spreadplayers" | "stopsound" | "summon" | "teammsg" | "teleport" | "tellraw" | "time" | "title" | "trigger" | "w" | "worldborder" | "tm" | "tp" | "xp" | "tell"> | undefined, ...parameters: string[]) => void, kill: (targets?: import("./arguments").MultipleEntitiesArgument | undefined) => void, list: (uuids?: boolean | undefined) => void, locate: (structure: import("./generalTypes").LiteralUnion<import("./arguments").STRUCTURES>) => void, locatebiome: (biome: import("./generalTypes").LiteralUnion<import("./arguments").BIOMES>) => void, loot: import("./commands/implementations").Loot, me: (...actions: string[]) => void, msg: (targets: import("./arguments").MultiplePlayersArgument, messages_0: import("./arguments").MessageOrSelector, ...messages_1: import("./arguments").MessageOrSelector[]) => void, particle: ((name: "minecraft:lava" | "minecraft:mycelium" | "minecraft:barrier" | "minecraft:light" | "minecraft:end_rod" | "minecraft:composter" | "minecraft:flame" | "minecraft:dolphin" | "minecraft:elder_guardian" | "minecraft:witch" | "minecraft:dragon_breath" | "minecraft:totem_of_undying" | "minecraft:ambient_entity_effect" | "minecraft:angry_villager" | "minecraft:bubble" | "minecraft:cloud" | "minecraft:crit" | "minecraft:damage_indicator" | "minecraft:dripping_lava" | "minecraft:falling_lava" | "minecraft:landing_lava" | "minecraft:dripping_water" | "minecraft:falling_water" | "minecraft:dust_color_transition" | "minecraft:effect" | "minecraft:enchanted_hit" | "minecraft:enchant" | "minecraft:entity_effect" | "minecraft:explosion_emitter" | "minecraft:explosion" | "minecraft:firework" | "minecraft:fishing" | "minecraft:soul_fire_flame" | "minecraft:soul" | "minecraft:flash" | "minecraft:happy_villager" | "minecraft:heart" | "minecraft:instant_effect" | "minecraft:vibration" | "minecraft:item_slime" | "minecraft:item_snowball" | "minecraft:large_smoke" | "minecraft:note" | "minecraft:poof" | "minecraft:portal" | "minecraft:rain" | "minecraft:smoke" | "minecraft:sneeze" | "minecraft:spit" | "minecraft:squid_ink" | "minecraft:sweep_attack" | "minecraft:underwater" | "minecraft:splash" | "minecraft:bubble_pop" | "minecraft:current_down" | "minecraft:bubble_column_up" | "minecraft:nautilus" | "minecraft:campfire_cosy_smoke" | "minecraft:campfire_signal_smoke" | "minecraft:dripping_honey" | "minecraft:falling_honey" | "minecraft:landing_honey" | "minecraft:falling_nectar" | "minecraft:falling_spore_blossom" | "minecraft:ash" | "minecraft:crimson_spore" | "minecraft:warped_spore" | "minecraft:spore_blossom_air" | "minecraft:dripping_obsidian_tear" | "minecraft:falling_obsidian_tear" | "minecraft:landing_obsidian_tear" | "minecraft:reverse_portal" | "minecraft:white_ash" | "minecraft:small_flame" | "minecraft:snowflake" | "minecraft:dripping_dripstone_lava" | "minecraft:falling_dripstone_lava" | "minecraft:dripping_dripstone_water" | "minecraft:falling_dripstone_water" | "minecraft:glow_squid_ink" | "minecraft:glow" | "minecraft:wax_on" | "minecraft:wax_off" | "minecraft:electric_spark" | "minecraft:scrape", pos?: import("./arguments").Coordinates | undefined, delta?: [deltaX: number, deltaY: number, deltaZ: number] | undefined, speed?: number | undefined, count?: number | undefined, mode?: "normal" | "force" | undefined, viewers?: import("./arguments").MultiplePlayersArgument | undefined) => void) & ((name: "minecraft:dust", colors: [red: number, green: number, blue: number, size: number], size: number, pos?: import("./arguments").Coordinates | undefined, delta?: [deltaX: number, deltaY: number, deltaZ: number] | undefined, speed?: number | undefined, count?: number | undefined, mode?: "normal" | "force" | undefined, viewers?: import("./arguments").MultiplePlayersArgument | undefined) => void) & ((name: "minecraft:block" | "minecraft:falling_dust", block: import("./generalTypes").LiteralUnion<import("./arguments").BLOCKS>, pos?: import("./arguments").Coordinates | undefined, delta?: [deltaX: number, deltaY: number, deltaZ: number] | undefined, speed?: number | undefined, count?: number | undefined, mode?: "normal" | "force" | undefined, viewers?: import("./arguments").MultiplePlayersArgument | undefined) => void) & ((name: "minecraft:item", item: import("./generalTypes").LiteralUnion<import("./arguments").ITEMS>, pos?: import("./arguments").Coordinates | undefined, delta?: [deltaX: number, deltaY: number, deltaZ: number] | undefined, speed?: number | undefined, count?: number | undefined, mode?: "normal" | "force" | undefined, viewers?: import("./arguments").MultiplePlayersArgument | undefined) => void), playsound: (sound: import("./generalTypes").LiteralUnion<import("./arguments").SOUND_EVENTS>, source: import("./arguments").SOUND_SOURCES, targets: import("./arguments").MultiplePlayersArgument, sourcePosition?: import("./arguments").Coordinates | undefined, volume?: number | undefined, pitch?: number | undefined, minVolume?: number | undefined) => void, raw: (...args: unknown[]) => void, recipe: import("./commands/implementations").RecipeCommand, reload: () => void, item: import("./commands/implementations").Item, say: (...messages: import("./arguments").MessageOrSelector[]) => void, schedule: import("./commands/implementations").Schedule, scoreboard: import("./commands/implementations").Scoreboard, seed: () => void, setblock: (pos: import("./arguments").Coordinates, block: import("./generalTypes").LiteralUnion<import("./arguments").BLOCKS>, type?: "replace" | "destroy" | "keep" | undefined) => void, setidletimeout: (minutes: number) => void, setworldspawn: (pos?: import("./arguments").Coordinates | undefined, angle?: import("./arguments").Rotation | undefined) => void, spawnpoint: (targets?: import("./arguments").MultiplePlayersArgument | undefined, pos?: import("./arguments").Coordinates | undefined, angle?: import("./arguments").Rotation | undefined) => void, spectate: (target: import("./arguments").SinglePlayerArgument, player?: import("./arguments").SingleEntityArgument | undefined) => void, spreadplayers: ((center: import("./arguments").ColumnCoordinates, spreadDistance: number, maxRange: number, respectTeams: boolean, targets: import("./arguments").MultipleEntitiesArgument) => void) & ((center: import("./arguments").ColumnCoordinates, spreadDistance: number, maxRange: number, underHeight: number, respectTeams: boolean, targets: import("./arguments").MultipleEntitiesArgument) => void), stopsound: (targets: import("./arguments").MultiplePlayersArgument, source?: "*" | import("./arguments").SOUND_SOURCES | undefined, sound?: import("./generalTypes").LiteralUnion<import("./arguments").SOUND_EVENTS> | undefined) => void, summon: (entity: import("./generalTypes").LiteralUnion<import("./arguments").ENTITY_TYPES>, pos?: import("./arguments").Coordinates | undefined, nbt?: import("./arguments").RootNBT | undefined) => void, tag: (targets: import("./arguments").MultipleEntitiesArgument) => import("./commands/implementations").TagArguments, team: import("./commands/implementations").Team, teammsg: (messages_0: import("./arguments").MessageOrSelector, ...messages_1: import("./arguments").MessageOrSelector[]) => void, teleport: ((destinationEntity: import("./arguments").SingleEntityArgument) => void) & ((location: import("./arguments").Coordinates) => void) & ((targets: import("./arguments").MultipleEntitiesArgument, destinationEntity: import("./arguments").SingleEntityArgument) => void) & ((targets: import("./arguments").MultipleEntitiesArgument, location: import("./arguments").Coordinates) => import("./commands/implementations").TeleportFacing) & ((targets: import("./arguments").MultipleEntitiesArgument, location: import("./arguments").Coordinates, rotation: import("./arguments").Rotation) => void), tellraw: (targets: import("./arguments").MultiplePlayersArgument, message: import("./arguments").JSONTextComponent) => void, time: import("./commands/implementations").Time, title: (targets: import("./arguments").MultiplePlayersArgument) => import("./commands/implementations").TitleArguments, trigger: (objective: import("./arguments").ObjectiveArgument) => import("./commands/implementations").TriggerArguments, w: (targets: import("./arguments").MultiplePlayersArgument, messages_0: import("./arguments").MessageOrSelector, ...messages_1: import("./arguments").MessageOrSelector[]) => void, weather: import("./commands/implementations").Weather, worldborder: import("./commands/implementations").WorldBorder, tm: (messages_0: import("./arguments").MessageOrSelector, ...messages_1: import("./arguments").MessageOrSelector[]) => void, tp: ((destinationEntity: import("./arguments").SingleEntityArgument) => void) & ((location: import("./arguments").Coordinates) => void) & ((targets: import("./arguments").MultipleEntitiesArgument, destinationEntity: import("./arguments").SingleEntityArgument) => void) & ((targets: import("./arguments").MultipleEntitiesArgument, location: import("./arguments").Coordinates) => import("./commands/implementations").TeleportFacing) & ((targets: import("./arguments").MultipleEntitiesArgument, location: import("./arguments").Coordinates, rotation: import("./arguments").Rotation) => void), xp: import("./commands/implementations").Experience, tell: (targets: import("./arguments").MultiplePlayersArgument, messages_0: import("./arguments").MessageOrSelector, ...messages_1: import("./arguments").MessageOrSelector[]) => void;
