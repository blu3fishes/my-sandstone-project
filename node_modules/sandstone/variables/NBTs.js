"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.nbtParser = exports.NBT = exports.NotNBT = exports.NBTCustomObject = void 0;
const util = __importStar(require("util"));
class NBTCustomObject {
    constructor() {
        this.toString = this[util.inspect.custom];
    }
}
exports.NBTCustomObject = NBTCustomObject;
function customUnit(num, unit) {
    var _b, _c;
    return new (_c = class extends NBTCustomObject {
            constructor() {
                super(...arguments);
                this[_b] = () => `${num}${unit}`;
            }
        },
        _b = util.inspect.custom,
        _c)();
}
function customUnitArray(numbers, unit) {
    var _b, _c;
    return new (_c = class extends NBTCustomObject {
            constructor() {
                super(...arguments);
                this[_b] = () => `[I; ${numbers.join(', ')}]`;
            }
        },
        _b = util.inspect.custom,
        _c)();
}
function customNumber(num, unit) {
    if (Array.isArray(num)) {
        return num.map((n) => customUnit(n, unit));
    }
    return customUnit(num, unit);
}
class NotNBT extends NBTCustomObject {
    constructor(nbt) {
        super();
        this[_a] = () => `!${exports.nbtParser(this.nbt)}`;
        this.nbt = nbt;
    }
}
exports.NotNBT = NotNBT;
_a = util.inspect.custom;
function dynamicNBT(template, ...args) {
    var _b, _c;
    const mixedArgs = template.flatMap((s, i) => [s, args[i]]).slice(0, -1); // Remove the last argument, which will always be undefined
    const result = mixedArgs.map((element) => (element instanceof NBTCustomObject ? exports.nbtParser(element) : element.toString()));
    return new (_c = class extends NBTCustomObject {
            constructor() {
                super(...arguments);
                this[_b] = () => result.join('');
            }
        },
        _b = util.inspect.custom,
        _c)();
}
exports.NBT = Object.assign(dynamicNBT, {
    float: (num) => customNumber(num, 'f'),
    double: (num) => customNumber(num, 'd'),
    byte: (num) => customNumber(num, 'b'),
    short: (num) => customNumber(num, 's'),
    long: (num) => customNumber(num, 'l'),
    intArray: (numbers) => customUnitArray(numbers, 'I'),
    longArray: (numbers) => customUnitArray(numbers, 'L'),
    not: (nbt) => new NotNBT(nbt),
    stringify: (nbt) => exports.nbtParser(nbt),
});
const nbtParser = (nbt) => {
    if (typeof nbt === 'number') {
        // We have a number
        return nbt.toString();
    }
    if (typeof nbt === 'string') {
        // We have a string
        /*
         * Sometimes, when we have both a " and a ' in a string,
         * util.inspect will end up creating a template string, invalid for Minecraft.
         */
        const inspectedStr = util.inspect(nbt, {
            breakLength: +Infinity,
            compact: true,
            maxStringLength: +Infinity,
            depth: +Infinity,
        });
        if (inspectedStr[0] === '`') {
            return JSON.stringify(nbt);
        }
        return inspectedStr;
    }
    if (Array.isArray(nbt)) {
        // We have an array
        const itemsStr = nbt.map(exports.nbtParser).join(',');
        return `[${itemsStr}]`;
    }
    // We have an object
    if (nbt instanceof NBTCustomObject) {
        // It's actually a "Minecraft Primitive", like 1b, and not an object
        return nbt[util.inspect.custom]();
    }
    // It's a real object.
    const objectStr = Object.entries(nbt).map(([key, value]) => `${key}:${exports.nbtParser(value)}`).join(',');
    return `{${objectStr}}`;
};
exports.nbtParser = nbtParser;
