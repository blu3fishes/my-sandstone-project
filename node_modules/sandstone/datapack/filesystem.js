"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDirectory = exports.createDirectory = exports.getWorldPath = exports.getMinecraftPath = void 0;
const os = __importStar(require("os"));
const path = __importStar(require("path"));
/**
 * Get the .minecraft path
 */
function getMinecraftPath() {
    // eslint-disable-next-line
    const fs = require('fs');
    function getMCPath() {
        switch (os.platform()) {
            case 'win32':
                return path.join(os.homedir(), 'AppData/Roaming/.minecraft');
            case 'darwin':
                return path.join(os.homedir(), 'Library/Application Support/minecraft');
            case 'linux':
            default:
                return path.join(os.homedir(), '.minecraft');
        }
    }
    const mcPath = getMCPath();
    if (!fs.existsSync(mcPath)) {
        throw new Error('Unable to locate the .minecraft folder. Please specify it manually.');
    }
    return mcPath;
}
exports.getMinecraftPath = getMinecraftPath;
/**
 *
 * @param worldName The name of the world
 * @param minecraftPath The optional location of the .minecraft folder.
 * If left unspecified, the .minecraft will be found automatically.
 */
function getWorldPath(worldName, minecraftPath = undefined) {
    let mcPath;
    // eslint-disable-next-line
    const fs = require('fs');
    if (minecraftPath) {
        mcPath = minecraftPath;
    }
    else {
        mcPath = getMinecraftPath();
    }
    const savesPath = path.join(mcPath, 'saves');
    const worldPath = path.join(savesPath, worldName);
    if (!fs.existsSync(worldPath)) {
        const existingWorlds = fs.readdirSync(savesPath, { withFileTypes: true }).filter((f) => f.isDirectory).map((f) => f.name);
        throw new Error(`Unable to locate the "${worldPath}" folder. Word ${worldName} does not exists. List of existing worlds: ${JSON.stringify(existingWorlds, null, 2)}`);
    }
    return worldPath;
}
exports.getWorldPath = getWorldPath;
/**
 * Create a directory.
 */
function createDirectory(directory) {
    // eslint-disable-next-line
    const fs = require('fs');
    // Create the path
    try {
        fs.mkdirSync(directory, { recursive: true });
    }
    catch (e) {
        // Folder already exists
    }
}
exports.createDirectory = createDirectory;
/**
 * Delete a directory.
 */
function deleteDirectory(directory) {
    // eslint-disable-next-line
    const fs = require('fs');
    // Delete the path
    try {
        fs.rmSync(directory, { recursive: true });
    }
    catch (e) {
        // Folder already deleted
    }
}
exports.deleteDirectory = deleteDirectory;
