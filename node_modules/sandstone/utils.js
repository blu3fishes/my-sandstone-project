"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPromise = exports.isAsyncFunction = void 0;
const util = __importStar(require("util"));
function isAsyncFunction(func) {
    if (util.types) {
        // We are in NodeJS, so we can use the builtin check
        return util.types.isAsyncFunction(func);
    }
    /*
     * We might be in a browser, or another weird environment
     * Try a native way first.
     */
    if (func.constructor.name === 'AsyncFunction') {
        return true;
    }
    // Okay, we need a stronger check.
    const string = func.toString().trim();
    return !!(
    // native
    string.match(/^async /)
        // babel (this may change, but hey...)
        || string.match(/return _ref[^.]*\.apply/));
}
exports.isAsyncFunction = isAsyncFunction;
function isPromise(promise) {
    return promise && typeof promise.then === 'function' && promise[Symbol.toStringTag] === 'Promise';
}
exports.isPromise = isPromise;
